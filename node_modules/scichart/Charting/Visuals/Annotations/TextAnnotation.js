"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextAnnotation = void 0;
var annotationHelpers_1 = require("./annotationHelpers");
var constants_1 = require("./constants");
var IAnnotation_1 = require("./IAnnotation");
var SvgAnnotationBase_1 = require("./SvgAnnotationBase");
/**
 * A TextAnnotation presents text information over the chart at specific {@link X1}, {@link Y1} coordinates
 */
var TextAnnotation = /** @class */ (function (_super) {
    __extends(TextAnnotation, _super);
    /**
     * Creates an instance of the {@link CustomAnnotation}
     * @param options The {@link ITextAnnotationOptions} which contain optional parameters
     */
    function TextAnnotation(options) {
        var _this = this;
        var _a, _b, _c, _d, _e;
        _this = _super.call(this, options) || this;
        /** @inheritDoc */
        _this.type = IAnnotation_1.EAnnotationType.SVGTextAnnotation;
        _this.textProperty = "DEFAULT TEXT";
        _this.textColorProperty = "#ffffff";
        _this.fontSizeProperty = 14;
        _this.fontFamilyProperty = "Arial";
        _this.fontWeightProperty = "Normal";
        _this.isDirty = true;
        _this.textProperty = (_a = options === null || options === void 0 ? void 0 : options.text) !== null && _a !== void 0 ? _a : _this.textProperty;
        _this.textColorProperty = (_b = options === null || options === void 0 ? void 0 : options.textColor) !== null && _b !== void 0 ? _b : _this.textColorProperty;
        _this.fontSizeProperty = (_c = options === null || options === void 0 ? void 0 : options.fontSize) !== null && _c !== void 0 ? _c : _this.fontSizeProperty;
        _this.fontFamilyProperty = (_d = options === null || options === void 0 ? void 0 : options.fontFamily) !== null && _d !== void 0 ? _d : _this.fontFamilyProperty;
        _this.fontWeight = (_e = options === null || options === void 0 ? void 0 : options.fontWeight) !== null && _e !== void 0 ? _e : _this.fontWeight;
        return _this;
    }
    Object.defineProperty(TextAnnotation.prototype, "text", {
        /**
         * text provided by the user
         */
        get: function () {
            return this.textProperty;
        },
        set: function (text) {
            if (this.textProperty !== text) {
                this.textProperty = text;
                this.notifyPropertyChanged(constants_1.PROPERTY.TEXT);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextAnnotation.prototype, "textColor", {
        /**
         * text color provided by the user
         */
        get: function () {
            return this.textColorProperty;
        },
        set: function (textColor) {
            if (this.textColorProperty !== textColor) {
                this.textColorProperty = textColor;
                this.notifyPropertyChanged(constants_1.PROPERTY.TEXT_STROKE);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextAnnotation.prototype, "fontSize", {
        /**
         * font size provided by the user
         */
        get: function () {
            return this.fontSizeProperty;
        },
        set: function (fontSize) {
            if (this.fontSizeProperty !== fontSize) {
                this.fontSizeProperty = fontSize;
                this.notifyPropertyChanged(constants_1.PROPERTY.FONT_SIZE);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextAnnotation.prototype, "fontFamily", {
        /**
         * font family provided by the user
         */
        get: function () {
            return this.fontFamilyProperty;
        },
        set: function (fontFamily) {
            if (this.fontFamilyProperty !== fontFamily) {
                this.fontFamilyProperty = fontFamily;
                this.notifyPropertyChanged(constants_1.PROPERTY.FONT_FAMILY);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TextAnnotation.prototype, "fontWeight", {
        /**
         * font weight provided by the user
         */
        get: function () {
            return this.fontWeightProperty;
        },
        set: function (fontWeight) {
            if (this.fontWeightProperty !== fontWeight) {
                this.fontWeightProperty = fontWeight;
                this.notifyPropertyChanged(constants_1.PROPERTY.FONT_WEIGHT);
            }
        },
        enumerable: false,
        configurable: true
    });
    TextAnnotation.prototype.toJSON = function () {
        var json = _super.prototype.toJSON.call(this);
        var options = {
            fontFamily: this.fontFamily,
            fontSize: this.fontSize,
            fontWeight: this.fontWeight,
            text: this.text,
            textColor: this.textColor
        };
        Object.assign(json.options, options);
        return json;
    };
    /**
     * Notifies listeners of {@link invalidateParentCallback} that a property has changed
     */
    TextAnnotation.prototype.notifyPropertyChanged = function (p) {
        if (p !== constants_1.PROPERTY.IS_HIDDEN &&
            p !== constants_1.PROPERTY.X_COORD_SHIFT &&
            p !== constants_1.PROPERTY.Y_COORD_SHIFT &&
            p !== constants_1.PROPERTY.HORIZONTAL_ANCHOR_POINT &&
            p !== constants_1.PROPERTY.VERTICAL_ANCHOR_POINT &&
            p !== constants_1.PROPERTY.IS_HIDDEN &&
            p !== constants_1.PROPERTY.X1 &&
            p !== constants_1.PROPERTY.X2 &&
            p !== constants_1.PROPERTY.Y1 &&
            p !== constants_1.PROPERTY.Y2) {
            this.isDirty = true;
        }
        if (this.invalidateParentCallback) {
            this.invalidateParentCallback();
        }
    };
    /**
     * @inheritDoc
     */
    TextAnnotation.prototype.create = function (xCalc, yCalc, xCoordSvgTrans, yCoordSvgTrans) {
        if (!this.isDirty && !this.isSelected) {
            this.calcAndSetAnnotationBorders(xCalc, yCalc);
            return;
        }
        if (this.svg) {
            this.delete();
        }
        this.setSvg(createSvg(this.svgRoot, this.textProperty, this.textColorProperty, this.fontSizeProperty, this.fontFamilyProperty, this.fontWeight));
        this.calcAndSetAnnotationBorders(xCalc, yCalc);
        this.updateAdornerInner();
        this.isDirty = false;
    };
    return TextAnnotation;
}(SvgAnnotationBase_1.SvgAnnotationBase));
exports.TextAnnotation = TextAnnotation;
/** @ignore */
/** @ignore */
var createSvg = function (svgRoot, text, color, fontSize, fontFamily, fontWeight) {
    var svgString = "<svg class=\"scichart__text-annotation\">\n        <text x=\"0\" y=\"".concat(fontSize, "\" fill=\"").concat(color, "\" font-size=\"").concat(fontSize, "\" font-family=\"").concat(fontFamily, "\" font-weight=\"").concat(fontWeight, "\">").concat(text, "</text>\n    </svg>");
    var svgNode = annotationHelpers_1.annotationHelpers.createSvg(svgString, svgRoot);
    return svgNode;
};
