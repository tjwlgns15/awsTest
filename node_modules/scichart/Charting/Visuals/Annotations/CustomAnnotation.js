"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomAnnotation = void 0;
var annotationHelpers_1 = require("./annotationHelpers");
var IAnnotation_1 = require("./IAnnotation");
var SvgAnnotationBase_1 = require("./SvgAnnotationBase");
/**
 * A CustomAnnotation presents SVG information over the chart at specific {@link X1}, {@link Y1} coordinates
 */
var CustomAnnotation = /** @class */ (function (_super) {
    __extends(CustomAnnotation, _super);
    /**
     * Creates an instance of the {@link CustomAnnotation}
     * @param options The {@link ICustomAnnotationOptions} which contain optional parameters
     */
    function CustomAnnotation(options) {
        var _this = this;
        var _a;
        _this = _super.call(this, options) || this;
        /** @inheritDoc */
        _this.type = IAnnotation_1.EAnnotationType.SVGCustomAnnotation;
        _this.svgStringProperty = (_a = options === null || options === void 0 ? void 0 : options.svgString) !== null && _a !== void 0 ? _a : undefined;
        return _this;
    }
    /** @inheritDoc */
    CustomAnnotation.prototype.toJSON = function () {
        var json = _super.prototype.toJSON.call(this);
        var options = {
            svgString: this.svgStringProperty
        };
        Object.assign(json.options, options);
        return json;
    };
    /** @inheritDoc */
    CustomAnnotation.prototype.create = function (xCalc, yCalc, xCoordSvgTrans, yCoordSvgTrans) {
        if (this.svg && !this.isEditable) {
            this.calcAndSetAnnotationBorders(xCalc, yCalc);
            return;
        }
        if (!this.svg ||
            (this.svg &&
                (this.isSelected ||
                    this.prevX1Coordinate !== this.getX1Coordinate(xCalc, yCalc) ||
                    this.prevY1Coordinate !== this.getY1Coordinate(xCalc, yCalc)))) {
            this.prevX1Coordinate = this.getX1Coordinate(xCalc, yCalc);
            this.prevY1Coordinate = this.getY1Coordinate(xCalc, yCalc);
            if (this.svg) {
                this.delete();
            }
            this.setSvg(annotationHelpers_1.annotationHelpers.createSvg(this.svgStringProperty, this.svgRoot));
            this.calcAndSetAnnotationBorders(xCalc, yCalc);
            this.updateAdornerInner();
            this.prevIsSelected = this.isSelected;
        }
        else {
            this.calcAndSetAnnotationBorders(xCalc, yCalc);
        }
        if (this.prevIsSelected !== this.isSelected && this.svg && this.isEditable) {
            this.updateAdornerInner();
            this.prevIsSelected = this.isSelected;
        }
    };
    Object.defineProperty(CustomAnnotation.prototype, "svgString", {
        get: function () {
            return this.svgStringProperty;
        },
        set: function (value) {
            this.delete();
            this.svgStringProperty = value;
        },
        enumerable: false,
        configurable: true
    });
    return CustomAnnotation;
}(SvgAnnotationBase_1.SvgAnnotationBase));
exports.CustomAnnotation = CustomAnnotation;
