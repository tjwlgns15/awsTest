import { CoordinateCalculatorBase } from "../../Numerics/CoordinateCalculators/CoordinateCalculatorBase";
import { EAnnotationType } from "./IAnnotation";
import { ISvgAnnotationBaseOptions, SvgAnnotationBase } from "./SvgAnnotationBase";
/**
 * Optional parameters passed to an {@link CustomAnnotation} during construction
 */
export interface ICustomAnnotationOptions extends ISvgAnnotationBaseOptions {
    /**
     * SVG dom element string provided by the user
     */
    svgString?: string;
}
/**
 * A CustomAnnotation presents SVG information over the chart at specific {@link X1}, {@link Y1} coordinates
 */
export declare class CustomAnnotation extends SvgAnnotationBase {
    /** @inheritDoc */
    readonly type = EAnnotationType.SVGCustomAnnotation;
    /**
     * SVG dom element string provided by the user
     */
    svgStringProperty: string;
    /**
     * Creates an instance of the {@link CustomAnnotation}
     * @param options The {@link ICustomAnnotationOptions} which contain optional parameters
     */
    constructor(options?: ICustomAnnotationOptions);
    /** @inheritDoc */
    toJSON(): {
        type: EAnnotationType;
        options: Required<Omit<import("./AnnotationBase").IAnnotationBaseOptions, never>>;
    };
    /** @inheritDoc */
    protected create(xCalc: CoordinateCalculatorBase, yCalc: CoordinateCalculatorBase, xCoordSvgTrans: number, yCoordSvgTrans: number): void;
    get svgString(): string;
    set svgString(value: string);
}
