import { ELabelProviderType } from "../../../../types/LabelProviderType";
import { ENumericFormat } from "../../../../types/NumericFormat";
import { LabelProviderBase2D, ILabel2DOptions } from "./LabelProviderBase2D";
export declare enum ETradeChartLabelFormat {
    Seconds = "Seconds",
    Minutes = "Minutes",
    Days = "Days",
    Months = "Months"
}
export interface ISmartDateLabelProviderOptions extends ILabel2DOptions {
    /**
     * Sets whether the first label should be formatted using the wider format (eg Month Day).
     * If false the wider format will only be used when it changes (eg day/month boundary)
     */
    showWiderDateOnFirstLabel?: boolean;
}
/**
 * The {@link SmartDateLabelProvider} formats Axis Labels and Cursor / Tooltips for {@link NumericAxis} types
 */
export declare class SmartDateLabelProvider extends LabelProviderBase2D {
    readonly type = ELabelProviderType.SmartDate;
    protected textVariesForSameTick: boolean;
    private prevValue;
    private prevPrevValue;
    private format;
    private showWiderDateOnFirstLabelProperty;
    private firstLabel;
    /**
     * Creates an instance of {@link SmartDateLabelProvider}
     */
    constructor(options?: ISmartDateLabelProviderOptions);
    /**
     * Gets or Sets whether the first label should be formatted using the wider format (eg Month Day).
     * If false the wider format will only be used when it changes (eg day/month boundary)
     */
    get showWiderDateOnFirstLabel(): boolean;
    /**
     * Gets or Sets whether the first label should be formatted using the wider format (eg Month Day).
     * If false the wider format will only be used when it changes (eg day/month boundary)
     */
    set showWiderDateOnFirstLabel(value: boolean);
    /**
     * @inheritDoc
     */
    onBeginAxisDraw(): void;
    /**
     * @inheritDoc
     */
    getLabels(majorTicks: number[]): string[];
    /** @inheritDoc */
    get numericFormat(): ENumericFormat;
    /** @inheritDoc */
    set numericFormat(value: ENumericFormat);
    private doFormat;
    private getTradeChartLabelFormat;
    private formatTradeChartLabel;
}
