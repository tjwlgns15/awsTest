"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartDateLabelProvider = exports.ETradeChartLabelFormat = void 0;
var LabelProviderType_1 = require("../../../../types/LabelProviderType");
var NumericFormat_1 = require("../../../../types/NumericFormat");
var date_1 = require("../../../../utils/date");
var number_1 = require("../../../../utils/number");
var LabelProviderBase2D_1 = require("./LabelProviderBase2D");
var ETradeChartLabelFormat;
(function (ETradeChartLabelFormat) {
    // Apr 25 ... 04:01:45 ... 02:02:30
    ETradeChartLabelFormat["Seconds"] = "Seconds";
    // Apr 25 ... 01:34 ... 02:24
    ETradeChartLabelFormat["Minutes"] = "Minutes";
    // Apr ... 08 ... 13
    ETradeChartLabelFormat["Days"] = "Days";
    // 2020 ... Jan ... Feb
    ETradeChartLabelFormat["Months"] = "Months";
})(ETradeChartLabelFormat = exports.ETradeChartLabelFormat || (exports.ETradeChartLabelFormat = {}));
var ONE_HOUR = 60 * 60;
var FIVE_DAYS = 60 * 60 * 24 * 5;
var FIFTY_DAYS = 60 * 60 * 24 * 50;
/**
 * The {@link SmartDateLabelProvider} formats Axis Labels and Cursor / Tooltips for {@link NumericAxis} types
 */
var SmartDateLabelProvider = /** @class */ (function (_super) {
    __extends(SmartDateLabelProvider, _super);
    /**
     * Creates an instance of {@link SmartDateLabelProvider}
     */
    function SmartDateLabelProvider(options) {
        var _this = this;
        var _a, _b, _c;
        _this = _super.call(this, __assign({ labelFormat: (_a = options === null || options === void 0 ? void 0 : options.labelFormat) !== null && _a !== void 0 ? _a : NumericFormat_1.ENumericFormat.Date_DDMMYYYY, cursorLabelFormat: (_b = options === null || options === void 0 ? void 0 : options.cursorLabelFormat) !== null && _b !== void 0 ? _b : NumericFormat_1.ENumericFormat.Date_DDMMYYYY }, options)) || this;
        _this.type = LabelProviderType_1.ELabelProviderType.SmartDate;
        _this.textVariesForSameTick = true;
        _this.showWiderDateOnFirstLabelProperty = true;
        _this.firstLabel = true;
        _this.showWiderDateOnFirstLabelProperty = (_c = options === null || options === void 0 ? void 0 : options.showWiderDateOnFirstLabel) !== null && _c !== void 0 ? _c : _this.showWiderDateOnFirstLabel;
        _this.formatCursorLabelProperty = function (dataValue) {
            var _a, _b;
            return _this.applyFormat((0, number_1.formatNumber)(dataValue, (_a = _this.cursorNumericFormat) !== null && _a !== void 0 ? _a : _this.numericFormat, (_b = _this.cursorPrecision) !== null && _b !== void 0 ? _b : _this.precision));
        };
        _this.doFormat = _this.doFormat.bind(_this);
        _this.formatLabelProperty = _this.doFormat;
        return _this;
    }
    Object.defineProperty(SmartDateLabelProvider.prototype, "showWiderDateOnFirstLabel", {
        /**
         * Gets or Sets whether the first label should be formatted using the wider format (eg Month Day).
         * If false the wider format will only be used when it changes (eg day/month boundary)
         */
        get: function () {
            return this.showWiderDateOnFirstLabelProperty;
        },
        /**
         * Gets or Sets whether the first label should be formatted using the wider format (eg Month Day).
         * If false the wider format will only be used when it changes (eg day/month boundary)
         */
        set: function (value) {
            if (this.showWiderDateOnFirstLabelProperty !== value) {
                this.showWiderDateOnFirstLabelProperty = value;
                this.invalidateParent();
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    SmartDateLabelProvider.prototype.onBeginAxisDraw = function () {
        // TODO: user can override here if they want
    };
    /**
     * @inheritDoc
     */
    SmartDateLabelProvider.prototype.getLabels = function (majorTicks) {
        var first = majorTicks[0];
        var ticksNumber = majorTicks.length;
        var last = majorTicks[ticksNumber - 1];
        // Only convert the values we need
        if (this.parentAxis.isCategoryAxis) {
            var categoryCoordCalc = this.parentAxis.getCurrentCoordinateCalculator();
            first = categoryCoordCalc.transformIndexToData(first);
            last = categoryCoordCalc.transformIndexToData(last);
        }
        this.prevPrevValue = undefined;
        this.prevValue = undefined;
        var timeRange = last - first;
        this.firstLabel = true;
        this.format = this.getTradeChartLabelFormat(timeRange, ticksNumber);
        var labels = _super.prototype.getLabels.call(this, majorTicks);
        this.format = undefined;
        return labels;
    };
    Object.defineProperty(SmartDateLabelProvider.prototype, "numericFormat", {
        /** @inheritDoc */
        get: function () {
            return undefined;
            // SCJS-1206 throwing erros here breaks serialization
            // throw new Error("Setting or getting numericFormat is not supported for SmartDateLabelProvider");
        },
        /** @inheritDoc */
        set: function (value) {
            // throw new Error("Setting or getting numericFormat is not supported for SmartDateLabelProvider");
        },
        enumerable: false,
        configurable: true
    });
    SmartDateLabelProvider.prototype.doFormat = function (dataValue) {
        var _a, _b;
        if (this.format) {
            var text = this.formatTradeChartLabel(this.format, dataValue, this.prevValue, this.prevPrevValue);
            this.prevPrevValue = this.prevValue;
            this.prevValue = dataValue;
            return text;
        }
        else {
            return this.applyFormat((0, number_1.formatNumber)(dataValue, (_a = this.cursorNumericFormat) !== null && _a !== void 0 ? _a : this.numericFormat, (_b = this.cursorPrecision) !== null && _b !== void 0 ? _b : this.precision));
        }
    };
    SmartDateLabelProvider.prototype.getTradeChartLabelFormat = function (timeRange, ticksNumber) {
        if (timeRange <= ONE_HOUR) {
            return ETradeChartLabelFormat.Seconds;
        }
        else if (timeRange <= FIVE_DAYS) {
            return ETradeChartLabelFormat.Minutes;
        }
        else if (timeRange <= FIFTY_DAYS) {
            return ETradeChartLabelFormat.Days;
        }
        else {
            return ETradeChartLabelFormat.Months;
        }
    };
    SmartDateLabelProvider.prototype.formatTradeChartLabel = function (tradeChartLabelFormat, value, prevValue, prevPrevValue) {
        var showWider = !this.firstLabel || this.showWiderDateOnFirstLabel;
        this.firstLabel = false;
        if (tradeChartLabelFormat === ETradeChartLabelFormat.Seconds) {
            var newDate = prevValue === undefined ||
                (0, date_1.formatUnixDateToHumanStringMMMDD)(value) !== (0, date_1.formatUnixDateToHumanStringMMMDD)(prevValue);
            if (newDate && showWider) {
                return (0, date_1.formatUnixDateToHumanStringMMMDD)(value);
            }
            else {
                return (0, date_1.formatUnixDateToHumanStringHHMMSS)(value);
            }
        }
        else if (tradeChartLabelFormat === ETradeChartLabelFormat.Minutes) {
            var newDate = prevValue === undefined ||
                (0, date_1.formatUnixDateToHumanStringMMMDD)(value) !== (0, date_1.formatUnixDateToHumanStringMMMDD)(prevValue);
            if (newDate && showWider) {
                return (0, date_1.formatUnixDateToHumanStringMMMDD)(value);
            }
            else {
                return (0, date_1.formatUnixDateToHumanStringHHMM)(value);
            }
        }
        else if (tradeChartLabelFormat === ETradeChartLabelFormat.Days) {
            var newMonth = prevValue === undefined ||
                (0, date_1.formatUnixDateToHumanStringMMM)(value) !== (0, date_1.formatUnixDateToHumanStringMMM)(prevValue);
            if (newMonth && showWider) {
                return (0, date_1.formatUnixDateToHumanStringMMM)(value);
            }
            else {
                return (0, date_1.formatUnixDateToHumanStringDD)(value);
            }
        }
        else if (tradeChartLabelFormat === ETradeChartLabelFormat.Months) {
            var newYear = prevValue === undefined ||
                (0, date_1.formatUnixDateToHumanStringYYYY)(value) !== (0, date_1.formatUnixDateToHumanStringYYYY)(prevValue);
            if (newYear && showWider) {
                return (0, date_1.formatUnixDateToHumanStringYYYY)(value);
            }
            // If previous label was year, display month label
            var prevPrevNewYear = prevPrevValue === undefined ||
                (0, date_1.formatUnixDateToHumanStringYYYY)(prevValue) !== (0, date_1.formatUnixDateToHumanStringYYYY)(prevPrevValue);
            var newMonth = prevPrevNewYear || (0, date_1.formatUnixDateToHumanStringMMM)(value) !== (0, date_1.formatUnixDateToHumanStringMMM)(prevValue);
            if (newMonth) {
                return (0, date_1.formatUnixDateToHumanStringMMM)(value);
            }
            return (0, date_1.formatUnixDateToHumanStringDD)(value);
        }
        return (0, number_1.formatNumber)(value, NumericFormat_1.ENumericFormat.Date_DDMMYYYY, 0);
    };
    return SmartDateLabelProvider;
}(LabelProviderBase2D_1.LabelProviderBase2D));
exports.SmartDateLabelProvider = SmartDateLabelProvider;
