import { SeriesAnimationFiniteStateMachine } from "../../../Core/Animations/AnimationFiniteStateMachine";
import { NumberRange } from "../../../Core/NumberRange";
import { ESeriesType } from "../../../types/SeriesType";
import { SCRTDoubleVector, TSciChart } from "../../../types/TSciChart";
import { SeriesAnimation } from "./Animations/SeriesAnimation";
import { BaseLineRenderableSeries, IBaseLineRenderableSeriesOptions } from "./BaseLineRenderableSeries";
import { TPalettingState } from "./DrawingProviders/BaseSeriesDrawingProvider";
import { ISpline } from "./ISpline";
export interface ISplineLineRenderableSeriesOptions extends IBaseLineRenderableSeriesOptions {
    /**
     * A number of interpolation points being used for the Spline,
     * where value 0 means no interpolation.
     */
    interpolationPoints?: number;
}
/**
 * Defines a line-series or line chart type with Cubic Spline interpolation in the SciChart's High Performance Real-time
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 * To add a line series to a {@link SciChartSurface} you need to declare both the {@link SplineLineRenderableSeries | RenderableSeries}
 * and a {@link XyDataSeries | DataSeries}. Simplified code sample below:
 *
 * ```ts
 * const sciChartSurface: SciChartSurface;
 * const wasmContext: TSciChart;
 * // Create and fill the dataseries
 * const dataSeries = new XyDataSeries(wasmContext);
 * dataSeries.append(1,2);
 * dataSeries.append(1,2);
 * // Create the renderableSeries
 * const lineSeries = new SplineLineRenderableSeries(wasmContext);
 * lineSeries.dataSeries = dataSeries;
 * // append to the SciChartSurface
 * sciChartSurface.renderableSeries.add(lineSeries);
 * ```
 */
export declare class SplineLineRenderableSeries extends BaseLineRenderableSeries implements ISpline {
    readonly type = ESeriesType.SplineLineSeries;
    xSplineValues: SCRTDoubleVector;
    ySplineValues: SCRTDoubleVector;
    warnOnSplineFailure: boolean;
    protected isSplineProperty: boolean;
    private interpolationPointsProperty;
    private recalculateSpline;
    /**
     * Creates an instance of the {@link SplineLineRenderableSeries}
     * @param webAssemblyContext The {@link TSciChart | SciChart WebAssembly Context} containing
     * native methods and access to our WebGL2 WebAssembly Drawing Engine
     * @param options optional parameters of type {@link ISplineLineRenderableSeriesOptions} applied when constructing the series type
     */
    constructor(webAssemblyContext: TSciChart, options?: ISplineLineRenderableSeriesOptions);
    get isSpline(): boolean;
    /**
     * Gets or sets the interpolationPoints being used for the Spline
     */
    get interpolationPoints(): number;
    /**
     * Gets or sets the interpolationPoints being used for the Spline
     */
    set interpolationPoints(value: number);
    /** @inheritDoc */
    delete(): void;
    /**
     * Updates spline values
     */
    updateSplineValues(): void;
    /** @inheritDoc */
    onSplineFailure(): void;
    /** @inheritDoc */
    getYRange(xVisibleRange: NumberRange, isXCategoryAxis?: boolean): NumberRange;
    /** @inheritDoc */
    toJSON(excludeData?: boolean): import("../../..").TSeriesDefinition;
    /**
     * @param color The color for palette
     * @param palettingState The palleting state
     */
    pushPalettedColors(color: number, palettingState: TPalettingState): void;
    /** @inheritDoc */
    protected setAnimationVectors(animation: SeriesAnimation): void;
    /** @inheritDoc */
    protected updateAnimationProperties(progress: number, animationFSM: SeriesAnimationFiniteStateMachine): void;
    /** @inheritDoc */
    protected dataSeriesDataChanged(): void;
}
