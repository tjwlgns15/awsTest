"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SplineLineRenderableSeries = void 0;
var Deleter_1 = require("../../../Core/Deleter");
var SeriesType_1 = require("../../../types/SeriesType");
var copyVector_1 = require("../../../utils/copyVector");
var BaseDataSeries_1 = require("../../Model/BaseDataSeries");
var animationHelpers_1 = require("./Animations/animationHelpers");
var BaseLineRenderableSeries_1 = require("./BaseLineRenderableSeries");
var constants_1 = require("./constants");
/**
 * Defines a line-series or line chart type with Cubic Spline interpolation in the SciChart's High Performance Real-time
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 * To add a line series to a {@link SciChartSurface} you need to declare both the {@link SplineLineRenderableSeries | RenderableSeries}
 * and a {@link XyDataSeries | DataSeries}. Simplified code sample below:
 *
 * ```ts
 * const sciChartSurface: SciChartSurface;
 * const wasmContext: TSciChart;
 * // Create and fill the dataseries
 * const dataSeries = new XyDataSeries(wasmContext);
 * dataSeries.append(1,2);
 * dataSeries.append(1,2);
 * // Create the renderableSeries
 * const lineSeries = new SplineLineRenderableSeries(wasmContext);
 * lineSeries.dataSeries = dataSeries;
 * // append to the SciChartSurface
 * sciChartSurface.renderableSeries.add(lineSeries);
 * ```
 */
var SplineLineRenderableSeries = /** @class */ (function (_super) {
    __extends(SplineLineRenderableSeries, _super);
    /**
     * Creates an instance of the {@link SplineLineRenderableSeries}
     * @param webAssemblyContext The {@link TSciChart | SciChart WebAssembly Context} containing
     * native methods and access to our WebGL2 WebAssembly Drawing Engine
     * @param options optional parameters of type {@link ISplineLineRenderableSeriesOptions} applied when constructing the series type
     */
    function SplineLineRenderableSeries(webAssemblyContext, options) {
        var _this = this;
        var _a, _b, _c;
        _this = _super.call(this, webAssemblyContext, options) || this;
        _this.type = SeriesType_1.ESeriesType.SplineLineSeries;
        _this.warnOnSplineFailure = true;
        _this.isSplineProperty = true;
        _this.interpolationPointsProperty = 10;
        _this.recalculateSpline = true;
        _this.xSplineValues = new webAssemblyContext.SCRTDoubleVector();
        _this.ySplineValues = new webAssemblyContext.SCRTDoubleVector();
        _this.interpolationPointsProperty = (_a = options === null || options === void 0 ? void 0 : options.interpolationPoints) !== null && _a !== void 0 ? _a : _this.interpolationPointsProperty;
        // Must be called here for the series type to be available
        if ((_b = _this.paletteProvider) === null || _b === void 0 ? void 0 : _b.onAttached) {
            (_c = _this.paletteProvider) === null || _c === void 0 ? void 0 : _c.onAttached(_this);
        }
        return _this;
    }
    Object.defineProperty(SplineLineRenderableSeries.prototype, "isSpline", {
        get: function () {
            return this.isSplineProperty;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SplineLineRenderableSeries.prototype, "interpolationPoints", {
        /**
         * Gets or sets the interpolationPoints being used for the Spline
         */
        get: function () {
            return this.interpolationPointsProperty;
        },
        /**
         * Gets or sets the interpolationPoints being used for the Spline
         */
        set: function (value) {
            this.interpolationPointsProperty = value;
            this.notifyPropertyChanged(constants_1.PROPERTY.INTERPOLATION_POINTS);
        },
        enumerable: false,
        configurable: true
    });
    /** @inheritDoc */
    SplineLineRenderableSeries.prototype.delete = function () {
        this.xSplineValues = (0, Deleter_1.deleteSafe)(this.xSplineValues);
        this.ySplineValues = (0, Deleter_1.deleteSafe)(this.ySplineValues);
        _super.prototype.delete.call(this);
    };
    /**
     * Updates spline values
     */
    SplineLineRenderableSeries.prototype.updateSplineValues = function () {
        if (!this.dataSeries || !this.recalculateSpline || !this.parentSurface) {
            return;
        }
        this.isSplineProperty = true;
        var dataSeries = this.dataSeries;
        if (dataSeries.fifoCapacity) {
            throw new Error("Sorry, fifo is not currently supported for spline series");
        }
        var xValues = this.xAxis.isCategoryAxis ? dataSeries.getNativeIndexes() : dataSeries.getNativeXValues();
        var yValues = dataSeries.getNativeYValues();
        var initialSize = xValues.size();
        this.webAssemblyContext.SCRTSplineHelperCubicSpline(xValues, yValues, this.xSplineValues, this.ySplineValues, initialSize, this.interpolationPoints, dataSeries.dataDistributionCalculator.containsNaN);
        if (isNaN(this.ySplineValues.get(0))) {
            this.onSplineFailure();
        }
        this.recalculateSpline = false;
    };
    /** @inheritDoc */
    SplineLineRenderableSeries.prototype.onSplineFailure = function () {
        if (this.warnOnSplineFailure) {
            console.warn("Could not calculate spline values.  X data may contain duplicates.  Falling back to original values.\nTo disable this warning set warnOnSplineFailure = false.  To change this behaviour, override onSplineFailure");
        }
        var xValues = this.xAxis.isCategoryAxis
            ? this.dataSeries.getNativeIndexes()
            : this.dataSeries.getNativeXValues();
        (0, copyVector_1.copyDoubleVector)(xValues, this.xSplineValues, this.webAssemblyContext);
        (0, copyVector_1.copyDoubleVector)(this.dataSeries.getNativeYValues(), this.ySplineValues, this.webAssemblyContext);
        // This tells the drawing providers not to treat the data as interpolated
        this.isSplineProperty = false;
    };
    /** @inheritDoc */
    SplineLineRenderableSeries.prototype.getYRange = function (xVisibleRange, isXCategoryAxis) {
        if (isXCategoryAxis === void 0) { isXCategoryAxis = false; }
        if (this.isRunningAnimation) {
            return this.dataSeries.getWindowedYRange(xVisibleRange, true, isXCategoryAxis);
        }
        this.updateSplineValues();
        return (0, BaseDataSeries_1.getWindowedYRange)(this.webAssemblyContext, this.xSplineValues, this.ySplineValues, xVisibleRange, true, isXCategoryAxis, this.dataSeries.dataDistributionCalculator.isSortedAscending);
    };
    /** @inheritDoc */
    SplineLineRenderableSeries.prototype.toJSON = function (excludeData) {
        if (excludeData === void 0) { excludeData = false; }
        var json = _super.prototype.toJSON.call(this, excludeData);
        var options = {
            interpolationPoints: this.interpolationPoints
        };
        Object.assign(json.options, options);
        return json;
    };
    /**
     * @param color The color for palette
     * @param palettingState The palleting state
     */
    SplineLineRenderableSeries.prototype.pushPalettedColors = function (color, palettingState) {
        for (var i = 0; i <= this.interpolationPoints; i++) {
            palettingState.palettedColors.push_back(color);
        }
    };
    /** @inheritDoc */
    SplineLineRenderableSeries.prototype.setAnimationVectors = function (animation) {
        var ds = this.dataSeries;
        if (!ds.xInitialAnimationValues) {
            ds.createAnimationVectors();
        }
        this.updateSplineValues();
        animationHelpers_1.animationHelpers.setSplineAnimationVectors(this.webAssemblyContext, animation, this.dataSeries, animation.dataSeries, this.xSplineValues, this.ySplineValues, this.xAxis.isCategoryAxis, this.interpolationPoints);
    };
    /** @inheritDoc */
    SplineLineRenderableSeries.prototype.updateAnimationProperties = function (progress, animationFSM) {
        var animation = animationFSM.animation;
        animation.updateSeriesProperties(this, animationFSM.initialStyles, animationFSM.animationProgress);
        var dataSeries = this.dataSeries;
        if (dataSeries) {
            animationHelpers_1.animationHelpers.updateSplineAnimationProperties(this.webAssemblyContext, animation, progress, dataSeries, this.xSplineValues, this.ySplineValues);
        }
        if (this.invalidateParentCallback) {
            this.invalidateParentCallback();
        }
    };
    /** @inheritDoc */
    SplineLineRenderableSeries.prototype.dataSeriesDataChanged = function () {
        this.recalculateSpline = true;
        _super.prototype.dataSeriesDataChanged.call(this);
    };
    return SplineLineRenderableSeries;
}(BaseLineRenderableSeries_1.BaseLineRenderableSeries));
exports.SplineLineRenderableSeries = SplineLineRenderableSeries;
