import { NumberRange } from "../../../Core/NumberRange";
import { SCRTDoubleVector, TSciChart } from "../../../types/TSciChart";
import { IOhlcPointSeries } from "../../Model/PointSeries/IPointSeries";
import { OhlcPointSeriesResampled } from "../../Model/PointSeries/OhlcPointSeriesResampled";
import { ResamplingParams } from "../../Numerics/Resamplers/ResamplingParams";
import { IThemeProvider } from "../../Themes/IThemeProvider";
import { BaseRenderableSeries } from "./BaseRenderableSeries";
import { IHitTestProvider } from "./HitTest/IHitTestProvider";
import { IBaseRenderableSeriesOptions } from "./IBaseRenderableSeriesOptions";
export interface IBaseOhlcRenderableSeriesOptions extends IBaseRenderableSeriesOptions {
    strokeUp?: string;
    strokeDown?: string;
    dataPointWidth?: number;
}
export declare abstract class BaseOhlcRenderableSeries extends BaseRenderableSeries {
    protected pointSeries: OhlcPointSeriesResampled;
    private strokeUpProperty;
    private strokeDownProperty;
    private dataPointWidthProperty;
    private xyyTempPointSeries;
    constructor(webAssemblyContext: TSciChart, options?: IBaseOhlcRenderableSeriesOptions);
    /** @inheritDoc */
    applyTheme(themeProvider: IThemeProvider): void;
    /**
     * Gets or sets the stoke when candlestick close is greater than open, as an HTML color code
     */
    get strokeUp(): string;
    /**
     * Gets or sets the stoke when candlestick close is greater than open, as an HTML color code
     */
    set strokeUp(htmlColorCode: string);
    /**
     * Gets or sets the stoke when candlestick close is less than open, as an HTML color code
     */
    get strokeDown(): string;
    /**
     * Gets or sets the stoke when candlestick close is less than open, as an HTML color code
     */
    set strokeDown(htmlColorCode: string);
    /**
     * Gets or sets the width of candles as a fraction of available space. Valid values range from 0.0 - 1.0
     */
    get dataPointWidth(): number;
    /**
     * Gets or sets the width of candles as a fraction of available space. Valid values range from 0.0 - 1.0
     */
    set dataPointWidth(value: number);
    /** @inheritDoc */
    notifyPropertyChanged(propertyName: string): void;
    /** @inheritDoc */
    getXRange(): NumberRange;
    /** @inheritDoc */
    delete(): void;
    /**
     * Returns the {@link IDataSeries.getNativeOpenValues} for the associated {@link dataSeries}
     */
    getNativeOpenValues(): SCRTDoubleVector;
    /**
     * Returns the {@link IDataSeries.getNativeHighValues} for the associated {@link dataSeries}
     */
    getNativeHighValues(): SCRTDoubleVector;
    /**
     * Returns the {@link IDataSeries.getNativeLowValues} for the associated {@link dataSeries}
     */
    getNativeLowValues(): SCRTDoubleVector;
    /**
     * Returns the {@link IDataSeries.getNativeCloseValues} for the associated {@link dataSeries}
     */
    getNativeCloseValues(): SCRTDoubleVector;
    /** @inheritDoc */
    resolveAutoColors(index: number, maxSeries: number, theme: IThemeProvider): void;
    /** @inheritDoc */
    toPointSeries(rp?: ResamplingParams): IOhlcPointSeries;
    /** @inheritDoc */
    protected newHitTestProvider(): IHitTestProvider;
}
