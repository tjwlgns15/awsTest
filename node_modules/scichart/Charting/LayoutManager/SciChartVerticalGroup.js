"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SciChartVerticalGroup = void 0;
var Size_1 = require("../../types/Size");
var LayoutManager_1 = require("./LayoutManager");
var SynchronizedLayoutManager_1 = require("./SynchronizedLayoutManager");
var SciChartVerticalGroup = /** @class */ (function () {
    function SciChartVerticalGroup() {
        this.groupRightSize = 0;
        this.groupLeftSize = 0;
        this.layoutManagers = [];
        this.leftOuterLayoutSizes = {};
        this.rightOuterLayoutSizes = {};
    }
    SciChartVerticalGroup.prototype.addSurfaceToGroup = function (sciChartSurface) {
        var syncLayoutManager = new SynchronizedLayoutManager_1.SynchronizedLayoutManager(this);
        this.layoutManagers.push(syncLayoutManager);
        sciChartSurface.layoutManager = syncLayoutManager;
        var _a = sciChartSurface.domCanvas2D, width = _a.width, height = _a.height;
        sciChartSurface.layoutManager.layoutChart(new Size_1.Size(width, height));
        this.synchronizeAxisSizes();
    };
    SciChartVerticalGroup.prototype.removeSurface = function (sciChartSurface) {
        var synchronizedLayoutManager = sciChartSurface.layoutManager;
        var indexToRemove = this.layoutManagers.findIndex(function (manager) { return manager === synchronizedLayoutManager; });
        if (indexToRemove < 0) {
            throw new Error("Surface ".concat(sciChartSurface.id, " not found in Vertical Group!"));
        }
        this.layoutManagers.splice(indexToRemove, 1);
        var defaultLayoutManager = new LayoutManager_1.LayoutManager();
        sciChartSurface.layoutManager = defaultLayoutManager;
        var _a = sciChartSurface.domCanvas2D, width = _a.width, height = _a.height;
        sciChartSurface.layoutManager.layoutChart(new Size_1.Size(width, height));
        this.onLeftSizeChanged(synchronizedLayoutManager.id, 0);
        this.onRightSizeChanged(synchronizedLayoutManager.id, 0);
        delete this.leftOuterLayoutSizes[synchronizedLayoutManager.id];
        delete this.rightOuterLayoutSizes[synchronizedLayoutManager.id];
        this.synchronizeAxisSizes();
    };
    SciChartVerticalGroup.prototype.synchronizeAxisSizes = function () {
        this.layoutManagers.forEach(function (lm) {
            lm.trySynchronizeLayouts();
        });
    };
    SciChartVerticalGroup.prototype.onLeftSizeChanged = function (key, value) {
        this.leftOuterLayoutSizes[key] = value;
        this.groupLeftSize = calculateMaxGroupSize(this.leftOuterLayoutSizes);
    };
    SciChartVerticalGroup.prototype.onRightSizeChanged = function (key, value) {
        this.rightOuterLayoutSizes[key] = value;
        this.groupRightSize = calculateMaxGroupSize(this.rightOuterLayoutSizes);
    };
    return SciChartVerticalGroup;
}());
exports.SciChartVerticalGroup = SciChartVerticalGroup;
var calculateMaxGroupSize = function (outerLayoutSizes) {
    var areaWidth = 0;
    Object.keys(outerLayoutSizes).forEach(function (key) {
        areaWidth = Math.max(areaWidth, outerLayoutSizes[key]);
    });
    return areaWidth;
};
