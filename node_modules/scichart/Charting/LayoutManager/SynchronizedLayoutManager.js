"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SynchronizedLayoutManager = void 0;
var LayoutMangerType_1 = require("../../types/LayoutMangerType");
var guid_1 = require("../../utils/guid");
var LayoutManager_1 = require("./LayoutManager");
/**
 * An {@link ILayoutManager} used by {@link SciChartVerticalGroup} to synchronise Layout accross mutltiple SciChartSurfaces in a group
 */
var SynchronizedLayoutManager = /** @class */ (function (_super) {
    __extends(SynchronizedLayoutManager, _super);
    function SynchronizedLayoutManager(verticalGroup, options) {
        var _this = _super.call(this, options) || this;
        _this.type = LayoutMangerType_1.ELayoutManagerType.Synchronised;
        _this.id = (0, guid_1.generateGuid)();
        _this.verticalGroup = verticalGroup;
        return _this;
    }
    SynchronizedLayoutManager.prototype.layoutChart = function (viewportSize) {
        var size = _super.prototype.layoutChart.call(this, viewportSize);
        this.verticalGroup.synchronizeAxisSizes();
        return size;
    };
    SynchronizedLayoutManager.prototype.trySynchronizeLayouts = function () {
        if (this.lastLeftOuterAreaSize !== this.verticalGroup.groupLeftSize ||
            this.lastRightOuterAreaSize !== this.verticalGroup.groupRightSize) {
            this.sciChartSurface.invalidateElement();
        }
    };
    SynchronizedLayoutManager.prototype.measureLeftOuterAxes = function () {
        _super.prototype.measureLeftOuterAxes.call(this);
        this.verticalGroup.onLeftSizeChanged(this.id, this.chartLayoutState.leftOuterAreaSize);
        var newSize = Math.max(this.chartLayoutState.leftOuterAreaSize, this.verticalGroup.groupLeftSize);
        this.chartLayoutState.leftOuterAreaSize = newSize;
        this.lastLeftOuterAreaSize = newSize;
    };
    SynchronizedLayoutManager.prototype.measureRightOuterAxes = function () {
        _super.prototype.measureRightOuterAxes.call(this);
        this.verticalGroup.onRightSizeChanged(this.id, this.chartLayoutState.rightOuterAreaSize);
        var newSize = Math.max(this.chartLayoutState.rightOuterAreaSize, this.verticalGroup.groupRightSize);
        this.chartLayoutState.rightOuterAreaSize = newSize;
        this.lastRightOuterAreaSize = newSize;
    };
    return SynchronizedLayoutManager;
}(LayoutManager_1.LayoutManager));
exports.SynchronizedLayoutManager = SynchronizedLayoutManager;
